#include "mpc-pointing/ocp.hpp"

int main() {
  // Create OCP from configuration files
  //  Robot designer
  sobec::RobotDesignerSettings designerSettings =
      sobec::RobotDesignerSettings();

  designerSettings.controlledJointsNames = {
      "root_joint",        "leg_left_1_joint",  "leg_left_2_joint",
      "leg_left_3_joint",  "leg_left_4_joint",  "leg_left_5_joint",
      "leg_left_6_joint",  "leg_right_1_joint", "leg_right_2_joint",
      "leg_right_3_joint", "leg_right_4_joint", "leg_right_5_joint",
      "leg_right_6_joint", "torso_1_joint",     "torso_2_joint",
      "arm_left_1_joint",  "arm_left_2_joint",  "arm_left_3_joint",
      "arm_left_4_joint",  "arm_left_5_joint",  "arm_left_6_joint",
      "arm_left_7_joint",  "arm_right_1_joint", "arm_right_2_joint",
      "arm_right_3_joint", "arm_right_4_joint"};
  designerSettings.leftFootName = "left_sole_link";
  designerSettings.rightFootName = "right_sole_link";
  designerSettings.urdfPath =
      "/opt/openrobots/share/example-robot-data/robots/talos_data/robots/"
      "talos_reduced.urdf";
  designerSettings.srdfPath =
      "/opt/openrobots/share/example-robot-data/robots/talos_data/srdf/"
      "talos.srdf";

  sobec::RobotDesigner pinWrapper = sobec::RobotDesigner(designerSettings);

  pinocchio::SE3 gripperMtool = pinocchio::SE3::Identity();
  gripperMtool.translation().x() = 0;
  gripperMtool.translation().y() = -0.02;
  gripperMtool.translation().z() = -0.0825;
  pinWrapper.addEndEffectorFrame("deburring_tool",
                                 "gripper_left_fingertip_3_link", gripperMtool);

  std::vector<double> lowerPositionLimit = {
      // Base
      -1, -1, -1, -1, -1, -1, -1,
      // Left leg
      -0.35, -0.52, -2.10, 0.0, -1.31, -0.52,
      // Right leg
      -1.57, -0.52, -2.10, 0.0, -1.31, -0.52,
      // Torso
      -1.3, -0.1,
      // Left arm
      -1.57, -0.2, -2.44, -2.1, -2.53, -1.3, -0.6,
      // Right arm
      -0.4, -2.88, -2.44, -2.1};
  std::vector<double> upperPositionLimit = {// Base
                                            1, 1, 1, 1, 1, 1, 1,
                                            // Left leg
                                            1.57, 0.52, 0.7, 2.62, 0.77, 0.52,
                                            // Right leg
                                            0.34, 0.52, 0.7, 2.61, 0.76, 0.52,
                                            // Torso
                                            1.3, 0.78,
                                            // Left arm
                                            0.52, 2.88, 2.44, 0, 2.53, 1.3, 0.6,
                                            // Right arm
                                            1.57, -0.2, 2.44, 0};

  std::vector<double>::size_type size_limit = lowerPositionLimit.size();
  pinWrapper.updateModelLimits(
      Eigen::VectorXd::Map(lowerPositionLimit.data(), (Eigen::Index)size_limit),
      Eigen::VectorXd::Map(upperPositionLimit.data(),
                           (Eigen::Index)size_limit));

  //  OCP
  std::string parameterFileOCP =
      "/local/users/cperrot/ws_wbmpc/src/talos-manipulation/config/"
      "settings_sobec.yaml";
  mpc_p::OCPSettings_Point ocpSettings = mpc_p::OCPSettings_Point();
  ocpSettings.readParamsFromYamlFile(parameterFileOCP);
  mpc_p::OCP_Point OCP = mpc_p::OCP_Point(ocpSettings, pinWrapper);

  // Load data from serialized file
  std::vector<mpc_p::OCP_debugData>::size_type testCase = 0;
  std::vector<mpc_p::OCP_debugData> debugData = OCP.fetchFromFile(
      "/local/users/cperrot/ws_wbmpc/archives/"
      "CommandCost.txt");

  // Initialize OCP with the same initial state
  Eigen::VectorXd x_current = debugData[testCase].xi[0];
  OCP.initialize(x_current, pinocchio::SE3::Identity());
  OCP.reprOCP();

  // Compare loaded data with the one generated by the OCP
  auto xs_OCP = OCP.get_solver()->get_xs();
  auto xs_Data = debugData[testCase].xs;

  for (std::vector<Eigen::VectorXd>::size_type i = 0; i < xs_OCP.size(); i++) {
    if ((xs_OCP[i] - xs_Data[i]).norm() > 0) {
      std::cout << (xs_OCP[i] - xs_Data[i]).norm() << std::endl;
      std::cout << "Failure" << std::endl;
      return 1;
    }
  }
  std::cout << "Success" << std::endl;
  return 0;
}
