#include "mpc-pointing/mpc.hpp"

int main() {
  // Create OCP from configuration files
  //  Robot designer
  sobec::RobotDesignerSettings designerSettings =
      sobec::RobotDesignerSettings();

  designerSettings.controlledJointsNames = {
      "root_joint",        "leg_left_1_joint",  "leg_left_2_joint",
      "leg_left_3_joint",  "leg_left_4_joint",  "leg_left_5_joint",
      "leg_left_6_joint",  "leg_right_1_joint", "leg_right_2_joint",
      "leg_right_3_joint", "leg_right_4_joint", "leg_right_5_joint",
      "leg_right_6_joint", "torso_1_joint",     "torso_2_joint",
      "arm_left_1_joint",  "arm_left_2_joint",  "arm_left_3_joint",
      "arm_left_4_joint",  "arm_left_5_joint",  "arm_left_6_joint",
      "arm_left_7_joint",  "arm_right_1_joint", "arm_right_2_joint",
      "arm_right_3_joint", "arm_right_4_joint"};
  designerSettings.leftFootName = "left_sole_link";
  designerSettings.rightFootName = "right_sole_link";
  designerSettings.urdfPath =
      "/opt/openrobots/share/example-robot-data/robots/talos_data/robots/"
      "talos_reduced.urdf";
  designerSettings.srdfPath =
      "/opt/openrobots/share/example-robot-data/robots/talos_data/srdf/"
      "talos.srdf";

  sobec::RobotDesigner pinWrapper = sobec::RobotDesigner(designerSettings);

  pinocchio::SE3 gripperMtool = pinocchio::SE3::Identity();
  gripperMtool.translation().x() = 0;
  gripperMtool.translation().y() = -0.02;
  gripperMtool.translation().z() = -0.0825;
  pinWrapper.addEndEffectorFrame("deburring_tool",
                                 "gripper_left_fingertip_3_link", gripperMtool);

  std::vector<double> lowerPositionLimit = {
      // Base
      -1, -1, -1, -1, -1, -1, -1,
      // Left leg
      -0.35, -0.52, -2.10, 0.0, -1.31, -0.52,
      // Right leg
      -1.57, -0.52, -2.10, 0.0, -1.31, -0.52,
      // Torso
      -1.3, -0.1,
      // Left arm
      -1.57, 0.2, -2.44, -2.1, -2.53, -1.3, -0.6,
      // Right arm
      -0.4, -2.88, -2.44, -2};
  std::vector<double> upperPositionLimit = {// Base
                                            1, 1, 1, 1, 1, 1, 1,
                                            // Left leg
                                            1.57, 0.52, 0.7, 2.62, 0.77, 0.52,
                                            // Right leg
                                            0.35, 0.52, 0.7, 2.62, 0.77, 0.52,
                                            // Torso
                                            1.3, 0.78,
                                            // Left arm
                                            0.52, 2.88, 2.44, 0, 2.53, 1.3, 0.6,
                                            // Right arm
                                            1.57, -0.2, 2.44, 0};

  std::vector<double>::size_type size_limit = lowerPositionLimit.size();
  pinWrapper.updateModelLimits(
      Eigen::VectorXd::Map(lowerPositionLimit.data(), (Eigen::Index)size_limit),
      Eigen::VectorXd::Map(upperPositionLimit.data(),
                           (Eigen::Index)size_limit));

  //  MPC
  //    OCP parameters
  std::string parameterFile =
      "/home/cperrot/workspaces/wbDeburring/src/talos-manipulation/config/"
      "settings_sobec.yaml";
  mpc_p::OCPSettings_Point ocpSettings = mpc_p::OCPSettings_Point();
  ocpSettings.readParamsFromYamlFile(parameterFile);
  //    MPC parameters
  mpc_p::MPCSettings_Point mpcSettings = mpc_p::MPCSettings_Point();
  mpcSettings.readParamsFromYamlFile(parameterFile);

  mpc_p::MPC_Point MPC = mpc_p::MPC_Point(mpcSettings, ocpSettings, pinWrapper);

  // Load data from serialized file
  std::vector<mpc_p::MPC_debugData>::size_type iteration = 0;
  std::vector<mpc_p::MPC_debugData> debugData = MPC.fetchFromFile(
      "/home/cperrot/workspaces/archives/"
      "MPC_full.txt");

  // Initialize OCP with the same initial state
  Eigen::VectorXd x_current = debugData[iteration].x_input;

  MPC.initialize(x_current.head(MPC.get_designer().get_rModel().nq),
                 x_current.tail(MPC.get_designer().get_rModel().nv),
                 pinocchio::SE3::Identity());

  MPC.get_OCP().reprOCP(0);

  // Compare loaded data with the one generated by the OCP
  mpc_p::MPC_command output;

  while (iteration < debugData.size()) {
    output = debugData[iteration].output;

    auto us_MPC = MPC.get_u0();
    auto us_Data = output.us0;

    // Riccati
    auto K_OCP = MPC.get_K0();
    auto K_Data = output.K0;

    auto error_us = (us_MPC - us_Data).norm();
    auto error_K = (K_OCP - K_Data).norm();

    if (error_us > 1e-6 || error_K > 1e-4) {
      std::cout << "us[" << iteration << "]"
                << "=";
      std::cout << error_us << std::endl;

      std::cout << "K[" << iteration << "]"
                << "=";
      std::cout << error_K << std::endl;
      std::cout << "Failure" << std::endl;
    }

    iteration++;

    MPC.iterate(debugData[iteration].x_input, pinocchio::SE3::Identity());
  }

  std::cout << "Success" << std::endl;

  return 0;
}
